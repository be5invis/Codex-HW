$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../support/utils'
import [DesignParameters] from '../../meta/aesthetics'

glyph-module

glyph-block Symbol-Geometric : for-width-kinds WideWidth1
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define Geom : let [size (0.5 * MosaicWidth - 0.625 * SB * MosaicWidthScalar * MosaicWidthScalar)] : object
		Left  : MosaicMiddle - size
		Right : MosaicMiddle + size
		Top   : SymbolMid    + size
		Bot   : SymbolMid    - size
		Size  : begin size

	define [UpperHalfMask] : Rect (SymbolMid + Geom.Size * 2) SymbolMid 0 MosaicWidth
	define [LowerHalfMask] : Rect SymbolMid (SymbolMid - Geom.Size * 2) 0 MosaicWidth
	define [LeftHalfMask]  : Rect (SymbolMid + Geom.Size * 2) (SymbolMid - Geom.Size * 2) 0 MosaicMiddle
	define [RightHalfMask] : Rect (SymbolMid + Geom.Size * 2) (SymbolMid - Geom.Size * 2) MosaicMiddle MosaicWidth
	define [UpperLeftQuarterMark]  : intersection [UpperHalfMask] [LeftHalfMask]
	define [UpperRightQuarterMark] : intersection [UpperHalfMask] [RightHalfMask]
	define [LowerLeftQuarterMark]  : intersection [LowerHalfMask] [LeftHalfMask]
	define [LowerRightQuarterMark] : intersection [LowerHalfMask] [RightHalfMask]
	define [UpperLeftHalfMark]  : spiro-outline
		corner  (MosaicMiddle + Geom.Size * 2) (SymbolMid + Geom.Size * 2)
		corner  (MosaicMiddle - Geom.Size * 2) (SymbolMid + Geom.Size * 2)
		corner  (MosaicMiddle - Geom.Size * 2) (SymbolMid - Geom.Size * 2)
	define [LowerRightHalfMark] : spiro-outline
		corner  (MosaicMiddle + Geom.Size * 2) (SymbolMid + Geom.Size * 2)
		corner  (MosaicMiddle - Geom.Size * 2) (SymbolMid - Geom.Size * 2)
		corner  (MosaicMiddle + Geom.Size * 2) (SymbolMid - Geom.Size * 2)
	define [UpperRightHalfMark]  : spiro-outline
		corner  (MosaicMiddle + Geom.Size * 2) (SymbolMid + Geom.Size * 2)
		corner  (MosaicMiddle - Geom.Size * 2) (SymbolMid + Geom.Size * 2)
		corner  (MosaicMiddle + Geom.Size * 2) (SymbolMid - Geom.Size * 2)
	define [LowerLeftHalfMark] : spiro-outline
		corner  (MosaicMiddle - Geom.Size * 2) (SymbolMid - Geom.Size * 2)
		corner  (MosaicMiddle - Geom.Size * 2) (SymbolMid + Geom.Size * 2)
		corner  (MosaicMiddle + Geom.Size * 2) (SymbolMid - Geom.Size * 2)

	define [StdBlackShape fn name unicode props] : begin
		local pp : fallback props {.}
		create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
			set-width MosaicWidth
			include : fn
				fallback pp.cx MosaicMiddle
				fallback pp.cy SymbolMid
				Geom.Size * [fallback pp.size 1]
				begin 0

	define [StdWhiteShape fn name unicode props] : begin
		local pp : fallback props {.}
		create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
			set-width MosaicWidth
			include : difference
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					Geom.Size * [fallback pp.size 1]
					begin 0
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					Geom.Size * [fallback pp.size 1] - [fallback pp.sw GeometryStroke]
					fallback pp.sw GeometryStroke

	define [StdWhiteContainingBlackShape fn name unicode props] : begin
		local pp : fallback props {.}
		create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
			set-width MosaicWidth
			local sw : fallback pp.sw GeometryStroke
			include : fn
				fallback pp.cx MosaicMiddle
				fallback pp.cy SymbolMid
				0.5 * (Geom.Size * [fallback pp.size 1] - sw)
				begin 0
			include : difference
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					Geom.Size * [fallback pp.size 1]
					begin 0
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					Geom.Size * [fallback pp.size 1] - sw
					begin sw

	define [StdDoubleWhite fn name unicode props] : begin
		local pp : fallback props {.}
		create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
			set-width MosaicWidth
			local sw : fallback pp.sw GeometryStroke
			include : difference
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					0.5 * (Geom.Size * [fallback pp.size 1] - sw)
					begin 0
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					0.5 * (Geom.Size * [fallback pp.size 1] - sw) - sw
					begin sw
			include : difference
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					Geom.Size * [fallback pp.size 1]
					begin 0
				fn
					fallback pp.cx MosaicMiddle
					fallback pp.cy SymbolMid
					Geom.Size * [fallback pp.size 1] - sw
					begin sw

	define [ConvexWhitePolygon fn name unicode props] : begin
		local pp : fallback props {.}
		create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
			set-width MosaicWidth
			local sh : new-glyph : fn
				fallback pp.cx MosaicMiddle
				fallback pp.cy SymbolMid
				Geom.Size * [fallback pp.size 1]
				begin 0
			local outlines : glyph-proc : begin
				set this.gizmo : Translate 0 0
				foreach c [items-of sh.contours] : foreach j [range 0 c.length] : begin
					local a c.[if j (j - 1) (c.length - 1)]
					local b c.(j)
					include : dispiro
						disable-contrast
						widths.center ([fallback pp.sw GeometryStroke] * 2)
						corner [mix a.x b.x (-2)] [mix a.y b.y (-2)]
						corner [mix a.x b.x (+3)] [mix a.y b.y (+3)]

			include : intersection sh outlines

	define SizeLarge {.size [DesignParameters.GeometricLargeX MosaicWidth MosaicUnitWidth]}
	define SizeMedium {.size DesignParameters.geometric_medium_x}
	define SizeMediumSmall {.size DesignParameters.geometric_medium_small_x  .sw [Math.min GeometryStroke : AdviceStroke 5 MosaicWidthScalar]}
	define SizeSmall {.size DesignParameters.geometric_small_x  .sw [Math.min GeometryStroke : AdviceStroke 6 MosaicWidthScalar]}
	define SizeVerySmall {.size DesignParameters.geometric_very_small_x  .sw [Math.min GeometryStroke : AdviceStroke 7 MosaicWidthScalar]}

	define ObliqueSW : Math.min GeometryStroke : AdviceStroke 5.25 MosaicWidthScalar
	define SmallObliqueSW : Math.min GeometryStroke : AdviceStroke 6.25 MosaicWidthScalar
	define SizeOblique { .sw ObliqueSW }
	define SizeMediumOblique { .size DesignParameters.geometric_medium_x  .sw SmallObliqueSW }
	define SizeSmallOblique { .size DesignParameters.geometric_small_x  .sw SmallObliqueSW }


	do "Square and Half-square triangle"
		define [SquareShape cx cy size] : spiro-outline
			corner (cx - size) (cy + size)
			corner (cx + size) (cy + size)
			corner (cx + size) (cy - size)
			corner (cx - size) (cy - size)

		StdBlackShape SquareShape 'blackSquare' 0x25A0
		StdWhiteShape SquareShape 'whiteSquare' 0x25A1
		StdWhiteContainingBlackShape SquareShape 'whiteSquareWithCenter' 0x25A3
		StdBlackShape SquareShape 'blackLargeSquare' 0x2B1B SizeLarge
		StdWhiteShape SquareShape 'whiteLargeSquare' 0x2B1C SizeLarge
		StdBlackShape SquareShape 'blackMediumSquare' 0x25FC SizeMedium
		StdWhiteShape SquareShape 'whiteMediumSquare' 0x25FB SizeMedium
		StdBlackShape SquareShape 'blackMediumSmallSquare' 0x25FE SizeMediumSmall
		StdWhiteShape SquareShape 'whiteMediumSmallSquare' 0x25FD SizeMediumSmall
		StdBlackShape SquareShape 'blackSmallSquare' 0x25AA SizeSmall
		StdWhiteShape SquareShape 'whiteSmallSquare' 0x25AB SizeSmall
		StdBlackShape SquareShape 'blackVerySmallSquare' 0x2B1D SizeVerySmall
		StdWhiteShape SquareShape 'whiteVerySmallSquare' 0x2B1E SizeVerySmall
		StdBlackShape SquareShape 'blackCenteredSquare' 0x2BC0


		define [TriangleRBFill cx cy size] : spiro-outline
			corner (cx + size) (cy + size)
			corner (cx + size) (cy - size)
			corner (cx - size) (cy - size)

		define [TriangleLBFill cx cy size] : spiro-outline
			corner (cx - size) (cy + size)
			corner (cx + size) (cy - size)
			corner (cx - size) (cy - size)

		define [TriangleLTFill cx cy size] : spiro-outline
			corner (cx - size) (cy + size)
			corner (cx + size) (cy + size)
			corner (cx - size) (cy - size)

		define [TriangleRTFill cx cy size] : spiro-outline
			corner (cx - size) (cy + size)
			corner (cx + size) (cy + size)
			corner (cx + size) (cy - size)

		StdBlackShape TriangleRBFill 'blackTriangleRB' 0x25E2
		ConvexWhitePolygon TriangleRBFill 'whiteTriangleRB' 0x25FF
		StdBlackShape TriangleLBFill 'blackTriangleLB' 0x25E3
		ConvexWhitePolygon TriangleLBFill 'whiteTriangleLB' 0x25FA
		StdBlackShape TriangleLTFill 'blackTriangleLT' 0x25E4
		ConvexWhitePolygon TriangleLTFill 'whiteTriangleLT' 0x25F8
		StdBlackShape TriangleRTFill 'blackTriangleRT' 0x25E5
		ConvexWhitePolygon TriangleRTFill 'whiteTriangleRT' 0x25F9

	do "Rectangle"
		define [RectangleFill cx cy r] : spiro-outline
			corner (cx - r) (cy + r / 1.5)
			corner (cx + r) (cy + r / 1.5)
			corner (cx + r) (cy - r / 1.5)
			corner (cx - r) (cy - r / 1.5)

		StdBlackShape RectangleFill 'blackRectangle' 0x25AC
		ConvexWhitePolygon RectangleFill 'whiteRectangle' 0x25AD

		define [LongRectangleFill cx cy r] : spiro-outline
			corner (cx - r) (cy + r * 1.5)
			corner (cx + r) (cy + r * 1.5)
			corner (cx + r) (cy - r * 1.5)
			corner (cx - r) (cy - r * 1.5)

		StdBlackShape LongRectangleFill 'blackLongRectangle' 0x25AE
		ConvexWhitePolygon LongRectangleFill 'whiteLongRectangle' 0x25AF

		define [ParallelogramFill cx cy r] : begin
			define skew : r * 1 / 4
			return : spiro-outline
				corner (cx - r + skew) (cy + r / 1.5)
				corner (cx + r + skew) (cy + r / 1.5)
				corner (cx + r - skew) (cy - r / 1.5)
				corner (cx - r - skew) (cy - r / 1.5)

		StdBlackShape ParallelogramFill 'blackParallelogram' 0x25B0
		ConvexWhitePolygon ParallelogramFill 'whiteParallelogram' 0x25B1

	do "Triangles"
		define triangleOvershoot : 2.1 / [Math.sqrt 3]
		define [TriangleUpFill cx cy size] : spiro-outline
			corner cx (cy + size)
			corner (cx + size * triangleOvershoot) (cy - size)
			corner (cx - size * triangleOvershoot) (cy - size)

		define [TriangleDownFill cx cy size] : spiro-outline
			corner cx (cy - size)
			corner (cx + size * triangleOvershoot) (cy + size)
			corner (cx - size * triangleOvershoot) (cy + size)

		define [TriangleLeftFill cx cy size] : spiro-outline
			corner (cx - size) cy
			corner (cx + size) (cy - size * triangleOvershoot)
			corner (cx + size) (cy + size * triangleOvershoot)

		define [TriangleLeftThinFill cx cy size] : spiro-outline
			corner (cx - size) cy
			corner (cx + size) (cy - size * triangleOvershoot * (2 / 3))
			corner (cx + size) (cy + size * triangleOvershoot * (2 / 3))

		define [TriangleRightFill cx cy size] : spiro-outline
			corner (cx + size) cy
			corner (cx - size) (cy - size * triangleOvershoot)
			corner (cx - size) (cy + size * triangleOvershoot)

		define [TriangleRightThinFill cx cy size] : spiro-outline
			corner (cx + size) cy
			corner (cx - size) (cy - size * triangleOvershoot * (2 / 3))
			corner (cx - size) (cy + size * triangleOvershoot * (2 / 3))


		StdBlackShape TriangleUpFill 'blackTriangleUp' 0x25B2 SizeOblique
		ConvexWhitePolygon TriangleUpFill 'whiteTriangleUp' 0x25B3 SizeOblique
		StdBlackShape TriangleUpFill 'blackSmallTriangleUp' 0x25B4 SizeSmallOblique
		ConvexWhitePolygon TriangleUpFill 'whiteSmallTriangleUp' 0x25B5 SizeSmallOblique
		StdBlackShape TriangleRightFill 'blackTriangleRight' 0x25B6 SizeOblique
		ConvexWhitePolygon TriangleRightFill 'whiteTriangleRight' 0x25B7 SizeOblique
		StdBlackShape TriangleRightFill 'blackSmallTriangleRight' 0x25B8 SizeSmallOblique
		ConvexWhitePolygon TriangleRightFill 'whiteSmallTriangleRight' 0x25B9 SizeSmallOblique
		StdBlackShape TriangleRightThinFill 'blackThinTriangleRight' 0x25BA SizeOblique
		ConvexWhitePolygon TriangleRightThinFill 'whiteThinTriangleRight' 0x25BB SizeOblique
		StdBlackShape TriangleDownFill 'blackTriangleDown' 0x25BC SizeOblique
		ConvexWhitePolygon TriangleDownFill 'whiteTriangleDown' 0x25BD SizeOblique
		StdBlackShape TriangleDownFill 'blackSmallTriangleDown' 0x25BE SizeSmallOblique
		ConvexWhitePolygon TriangleDownFill 'whiteSmallTriangleDown' 0x25BF SizeSmallOblique
		StdBlackShape TriangleLeftFill 'blackTriangleLeft' 0x25C0 SizeOblique
		ConvexWhitePolygon TriangleLeftFill 'whiteTriangleLeft' 0x25C1 SizeOblique
		StdBlackShape TriangleLeftFill 'blackSmallTriangleLeft' 0x25C2 SizeSmallOblique
		ConvexWhitePolygon TriangleLeftFill 'whiteSmallTriangleLeft' 0x25C3 SizeSmallOblique
		StdBlackShape TriangleLeftThinFill 'blackThinTriangleLeft' 0x25C4 SizeOblique
		ConvexWhitePolygon TriangleLeftThinFill 'whiteThinTriangleLeft' 0x25C5 SizeOblique

		StdBlackShape TriangleUpFill 'blackCenterMediumTriangleUp' 0x2BC5 SizeMediumOblique
		StdBlackShape TriangleDownFill 'blackCenterMediumTriangleDown' 0x2BC6 SizeMediumOblique
		StdBlackShape TriangleLeftFill 'blackCenterMediumTriangleLeft' 0x2BC7 SizeMediumOblique
		StdBlackShape TriangleRightFill 'blackCenterMediumTriangleRight' 0x2BC8 SizeMediumOblique

		define [TriangularWedgeFill cx cy size] : intersection
			TriangleUpFill cx cy size
			union
				dispiro
					widths.rhs GeometryStroke
					corner cx (cy + size)
					corner (cx + size * triangleOvershoot) (cy - size)
				dispiro
					widths.lhs GeometryStroke
					corner cx (cy + size)
					corner (cx - size * triangleOvershoot) (cy - size)

		define [TriangularVeeFill cx cy size] : intersection
			TriangleDownFill cx cy size
			union
				dispiro
					widths.lhs GeometryStroke
					corner cx (cy - size)
					corner (cx + size * triangleOvershoot) (cy + size)
				dispiro
					widths.rhs GeometryStroke
					corner cx (cy - size)
					corner (cx - size * triangleOvershoot) (cy + size)

		StdBlackShape TriangularWedgeFill 'triangularWedge' null
		StdBlackShape TriangularVeeFill 'triangularVee' null

	do "Diamond"
		define [DiamondFill cx cy size] : spiro-outline
			corner cx (cy + size)
			corner (cx + size) cy
			corner cx (cy - size)
			corner (cx - size) cy

		StdBlackShape DiamondFill 'blackDiamond' 0x25C6 SizeOblique
		StdWhiteShape DiamondFill 'whiteDiamond' 0x25C7 SizeOblique
		StdWhiteContainingBlackShape DiamondFill 'whiteDiamondWithCenter' 0x25C8 SizeOblique
		StdBlackShape DiamondFill 'blackMediumDiamond' 0x2B25 SizeMediumOblique
		StdWhiteShape DiamondFill 'whiteMediumDiamond' 0x2B26 SizeMediumOblique
		StdBlackShape DiamondFill 'blackSmallDiamond' 0x2B29 SizeSmallOblique
		StdBlackShape DiamondFill 'blackCenteredDiamond' 0x2BC1 SizeOblique

	do "Lonzenge"
		define [LonzengeFill cx cy size] : spiro-outline
			corner cx (cy + size)
			corner (cx + size * 2 / 3) cy
			corner cx (cy - size)
			corner (cx - size * 2 / 3) cy

		StdBlackShape LonzengeFill 'blackLonzenge' 0x29EB SizeOblique
		ConvexWhitePolygon LonzengeFill 'whiteLonzenge' 0x25CA SizeOblique
		StdBlackShape LonzengeFill 'blackMediumLonzenge' 0x2B27 SizeMediumOblique
		ConvexWhitePolygon LonzengeFill 'whiteMediumLonzenge' 0x2B28 SizeMediumOblique
		StdBlackShape LonzengeFill 'blackSmallLonzenge' 0x2B2A SizeSmallOblique
		ConvexWhitePolygon LonzengeFill 'whiteSmallLonzenge' 0x2B2B SizeSmallOblique

	do "Circle"
		define [BlackCircleShape cx cy size] : spiro-outline
			g4 cx (cy + size)
			g4 (cx - size) cy
			g4 cx (cy - size)
			g4 (cx + size) cy
			close

		StdBlackShape BlackCircleShape 'blackCircleO' null
		StdBlackShape BlackCircleShape 'blackCircle' 0x25CF
		StdWhiteShape BlackCircleShape 'whiteCircle' 0x25CB
		StdWhiteContainingBlackShape BlackCircleShape 'whiteCircleWithCenter' 0x25C9
		StdDoubleWhite BlackCircleShape 'doubleWhiteCircle' 0x25CE {.sw [Math.min GeometryStroke : AdviceStroke 4 MosaicWidthScalar]}
		StdBlackShape BlackCircleShape 'blackSmallCircle' null SizeSmall
		StdWhiteShape BlackCircleShape 'whiteSmallCircle' null SizeSmall
		StdBlackShape BlackCircleShape 'blackMediumCircle' 0x26AB SizeMedium
		StdWhiteShape BlackCircleShape 'whiteMediumCircle' 0x26AA SizeMedium
		StdBlackShape BlackCircleShape 'blackLargeCircle' 0x2B24 SizeLarge
		StdWhiteShape BlackCircleShape 'whiteLargeCircle' 0x25EF SizeLarge

		create-glyph [MangleName 'blackLeftHalfCircle'] [MangleUnicode 0x25D6] : glyph-proc
			set-width MosaicWidth
			include : intersection
				refer-glyph : MangleName 'blackCircle'
				LeftHalfMask

		create-glyph [MangleName 'blackRightHalfCircle'] [MangleUnicode 0x25D7] : glyph-proc
			set-width MosaicWidth
			include : intersection
				refer-glyph : MangleName 'blackCircle'
				RightHalfMask

		create-glyph [MangleName 'blackUpperHalfCircle'] [MangleUnicode 0x2BCA] : glyph-proc
			set-width MosaicWidth
			include : intersection
				refer-glyph : MangleName 'blackCircle'
				UpperHalfMask

		create-glyph [MangleName 'blackBottomHalfCircle'] [MangleUnicode 0x2BCB] : glyph-proc
			set-width MosaicWidth
			include : intersection
				refer-glyph : MangleName 'blackCircle'
				LowerHalfMask

		create-glyph [MangleName 'dottedCircle'] [MangleUnicode 0x25CC] : glyph-proc
			set-width MosaicWidth
			include : [DivFrame MosaicWidthScalar].markSet.plus
			local n : 12 * [Math.ceil MosaicWidthScalar]
			local fine : AdviceStroke 10
			foreach j [range 0 n] : begin
				local angle : Math.PI * 2 * j / n
				local cx : MosaicMiddle + (Geom.Right - MosaicMiddle) * [Math.cos angle]
				local cy : SymbolMid + (Geom.Right - MosaicMiddle) * [Math.sin angle]
				include : CircleRingAt cx cy fine

		create-glyph [MangleName 'dottedSquare'] [MangleUnicode 0x2B1A] : glyph-proc
			set-width MosaicWidth
			include : [DivFrame MosaicWidthScalar].markSet.plus
			local n : 4 * [Math.ceil MosaicWidthScalar]
			local fine : AdviceStroke 10
			local box : object
				Left : Geom.Left + fine
				Right : Geom.Right - fine
				Top : Geom.Top - fine
				Bot : Geom.Bot + fine
			foreach j [range 0 n] : begin
				local t : j / n
				include : CircleRingAt box.Left [mix box.Bot box.Top t] fine
				include : CircleRingAt [mix box.Left box.Right t] box.Top fine
				include : CircleRingAt box.Right [mix box.Top box.Bot t] fine
				include : CircleRingAt [mix box.Right box.Left t] box.Bot fine

	do "Regular Polygon"
		define [RegularPolygonFill sides skip overflow phase] : lambda [cx cy size] : begin
			local corners {}
			foreach [j : range 0 sides] : begin
				local angle : 2 * Math.PI * j * skip / sides + Math.PI * phase
				corners.push : corner
					cx + size * overflow * [Math.sin angle]
					cy + size * overflow * [Math.cos angle]
			return : spiro-outline corners

		StdBlackShape [RegularPolygonFill 5  1  1.05 0] 'blackPentagon' 0x2B1F
		StdBlackShape [RegularPolygonFill 5  1  1.05 1] 'turnBlackPentagon' 0x2BC2
		ConvexWhitePolygon [RegularPolygonFill 5  1  1.05 0] 'whitePentagon' 0x2B20
		StdBlackShape [RegularPolygonFill 5  1  1.05 0.5] 'rhBlackPentagon' 0x2B53
		ConvexWhitePolygon [RegularPolygonFill 5  1  1.05 0.5] 'rhWhitePentagon' 0x2B54
		StdBlackShape [RegularPolygonFill 6  1  1.05 0] 'blackHexagon' 0x2B22
		ConvexWhitePolygon [RegularPolygonFill 6  1  1.05 0] 'whiteHexagon' 0x2B21
		StdBlackShape [RegularPolygonFill 6  1  1.05 0.5] 'hBlackHexagon' 0x2B23
		StdBlackShape [RegularPolygonFill 8  1  1.05 0] 'blackHorizontalOctagon' 0x2BC3
		StdBlackShape [RegularPolygonFill 8  1  1.05 0.128] 'blackOctagon' 0x2BC4
		StdBlackShape [RegularPolygonFill 5  2  1.1  0] 'blackStar' 0x2605
		StdWhiteShape [RegularPolygonFill 5  2  1.1  0] 'whiteStar' 0x2606
			begin {.sw ([AdviceStroke 5.5 : Math.sqrt MosaicWidthScalar] * [Math.sqrt 5])}

	do "Stars and Asterisks"
		define StarCfg : list
			* {.sides 6 .skip 1 .name 'sixPointedBlackStar' .unicode 0x2736 .pMag 1.05 .phase 0 .pShrink 0.4}
			* {.sides 8 .skip 1 .name 'eightPointedBlackStar' .unicode 0x2734 .pMag 1.15 .phase 0 .pShrink 0.25}
			* {.sides 8 .skip 1 .name 'eightPointedRectilinearBlackStar' .unicode 0x2737 .pMag 1.05 .phase (Math.PI / 8) .pShrink 0.4}
			* {.sides 8 .skip 1 .name 'heavyEightPointedRectilinearBlackStar' .unicode 0x2738 .pMag 1.05 .phase (Math.PI / 8) .pShrink 0.5}
			* {.sides 12 .skip 1 .name 'twelvePointedBlackStar' .unicode 0x2739 .pMag 1.05 .phase 0 .pShrink 0.5}
		foreach [[object sides skip name unicode pMag phase pShrink] : items-of StarCfg] : do
			create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
				set-width MosaicWidth
				local corners {}
				foreach [j : range 0 (2 * sides)] : begin
					local angle : Math.PI * j * skip / sides + phase
					local mag : [if (j % 2) pShrink 1] * pMag
					corners.push : corner
						MosaicMiddle + Geom.Size * mag * [Math.sin angle]
						SymbolMid + Geom.Size * mag * [Math.cos angle]
				include : spiro-outline corners

		define HeavySw : Math.max ([AdviceStroke 4.5 MosaicWidthScalar] * 1.5) (Width * 0.13 * [Math.sqrt MosaicWidthScalar])
		define AsteriskCfg : list
			* {.sides 4 .name 'heavyGreekCross' .cThin 1 .unicode 0x271A .phase 0 .sw HeavySw .pMag 1}
			* {.sides 6 .name 'heavyAsterisk' .cThin 0.9 .unicode 0x2731 .phase 0 .sw HeavySw .pMag 1}
			* {.sides 8 .name 'eightSpokedAsterisk' .cThin 0.75 .unicode 0x2733 .phase 0 .sw [AdviceStroke 7.5 : Math.sqrt MosaicWidthScalar] .pMag 1}
			* {.sides 16 .name 'sixteenSpokedAsterisk' .cThin 0.75 .unicode 0x273A .phase 0 .sw [AdviceStroke 8 : Math.sqrt MosaicWidthScalar] .pMag 1}
		foreach [[object sides name unicode phase sw cThin pMag] : items-of AsteriskCfg] : do
			create-glyph [MangleName name] [MangleUnicode unicode] : glyph-proc
				set-width MosaicWidth
				foreach [j : range 0 sides] : begin
					local angle : 2 * Math.PI * j / sides + phase
					include : dispiro
						corner MosaicMiddle SymbolMid [widths.center (sw * cThin)]
						corner
							MosaicMiddle + pMag * Geom.Size * [Math.sin (angle + Math.PI)]
							SymbolMid + pMag * Geom.Size * [Math.cos (angle + Math.PI)]
							widths.center sw

	do "Dice"
		define diceCombinations : list
			list 0x2680 { { 1 1 } }
			list 0x2681 { { 0 0 } { 2 2 } }
			list 0x2682 { { 0 0 } { 1 1 } { 2 2 } }
			list 0x2683 { { 0 0 } { 2 0 } { 0 2 } { 2 2 } }
			list 0x2684 { { 0 0 } { 2 0 } { 1 1 } { 0 2 } { 2 2 } }
			list 0x2685 { { 0 0 } { 0 1 } { 0 2 } { 2 0 } { 2 1 } { 2 2 } }

		foreach { unicode dots } [items-of diceCombinations] : begin
			create-glyph [MangleName "dice_\(unicode)"] [MangleUnicode unicode] : glyph-proc
				include [refer-glyph : MangleName 'whiteSquare'] AS_BASE ALSO_METRICS
				define dr : DotRadius / Stroke * [AdviceStroke 7 MosaicWidthScalar]
				define xLeftEx   : MosaicMiddle - Geom.Size + GeometryStroke
				define xRightEx  : MosaicMiddle + Geom.Size - GeometryStroke
				define yBottomEx : SymbolMid + Geom.Size - GeometryStroke
				define yTopEx    : SymbolMid - Geom.Size + GeometryStroke
				define xLeft     : mix xLeftEx xRightEx (1 / 5)
				define xRight    : mix xLeftEx xRightEx (4 / 5)
				define yBottom   : mix yBottomEx yTopEx (1 / 5)
				define yTop      : mix yBottomEx yTopEx (4 / 5)
				foreach { px py } [items-of dots] : begin
					include : CircleDotAt
						mix xLeft xRight (px / 2)
						mix yBottom yTop (py / 2)
						begin dr

	do "Rounded"
		create-glyph [MangleName 'roundwhitesquare'] [MangleUnicode 0x25A2] : glyph-proc
			set-width MosaicWidth
			define cr : Geom.Size - GeometryStroke * 2
			include : dispiro
				widths.lhs GeometryStroke
				flat (MosaicMiddle + 1) (SymbolMid + Geom.Size) [heading Leftward]
				curl (MosaicMiddle - cr) (SymbolMid + Geom.Size) [heading Leftward]
				archv
				flat (MosaicMiddle - Geom.Size) (SymbolMid + cr) [heading Downward]
				curl (MosaicMiddle - Geom.Size) (SymbolMid - cr) [heading Downward]
				arcvh
				flat (MosaicMiddle - cr) (SymbolMid - Geom.Size) [heading Rightward]
				curl (MosaicMiddle + cr) (SymbolMid - Geom.Size) [heading Rightward]
				archv
				flat (MosaicMiddle + Geom.Size) (SymbolMid - cr) [heading Upward]
				curl (MosaicMiddle + Geom.Size) (SymbolMid + cr) [heading Upward]
				arcvh
				flat (MosaicMiddle + cr) (SymbolMid + Geom.Size) [heading Leftward]
				curl (MosaicMiddle - 1) (SymbolMid + Geom.Size) [heading Leftward]

		define [ThickRoundedArrowBar x1 y1 x2 y2 r w] : glyph-proc
			include : PointingTo x1 y1 x2 y2 : lambda [mag] : spiro-outline
				g4 (-r) 0
				arcvh
				flat 0 r
				curl mag r
				archv
				g4 (mag + r) 0
				arcvh
				flat mag (-r)
				curl 0 (-r)
				archv
				close
		create-glyph [MangleName "whiteHeavySaltireWithRoundedCorners"] [MangleUnicode 0x1FBC0 WideWidth2] : glyph-proc
			set-width MosaicWidth
			local inner : [Math.max [AdviceStroke 3] (Width / 8)] / 2
			local thick : AdviceStroke 4
			local left : Geom.Left + (inner + thick)
			local right : Geom.Right - (inner + thick)
			local bot : Geom.Bot + (inner + thick)
			local top : Geom.Top - (inner + thick)
			include : difference
				union
					ThickRoundedArrowBar left top right bot (inner + thick) 0
					ThickRoundedArrowBar right top left bot (inner + thick) 0
				union
					ThickRoundedArrowBar left top right bot inner 0
					ThickRoundedArrowBar right top left bot inner 0

	do "Shaded hollow squares"
		define [HShadeShape] : begin
			define lineWidth : Math.min GeometryStroke ((Geom.Size * 2 - GeometryStroke * 2) * 1 / 11)
			define top : SymbolMid + Geom.Size - GeometryStroke + lineWidth / 2
			define bot : SymbolMid - (top - SymbolMid)
			return : union
				dispiro
					widths.center lineWidth
					flat Geom.Left [mix top bot 0.25] [heading Rightward]
					curl Geom.Right [mix top bot 0.25] [heading Rightward]
				dispiro
					widths.center lineWidth
					flat Geom.Left [mix top bot 0.5] [heading Rightward]
					curl Geom.Right [mix top bot 0.5] [heading Rightward]
				dispiro
					widths.center lineWidth
					flat Geom.Left [mix top bot 0.75] [heading Rightward]
					curl Geom.Right [mix top bot 0.75] [heading Rightward]

		create-glyph [MangleName 'hShadeSquare'] [MangleUnicode 0x25A4] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'whiteSquare'
				intersection
					refer-glyph : MangleName 'blackSquare'
					HShadeShape

		define [VShadeShape] : begin
			define lineWidth : Math.min GeometryStroke ((Geom.Size * 2 - GeometryStroke * 2) * 1 / 11)
			define r : MosaicWidth / 2 + Geom.Size - GeometryStroke + lineWidth / 2
			define l : MosaicWidth / 2 - (r - MosaicWidth / 2)
			return : union
				dispiro
					widths.center lineWidth
					flat [mix l r 0.25] Geom.Top [heading Downward]
					curl [mix l r 0.25] Geom.Bot [heading Downward]
				dispiro
					widths.center lineWidth
					flat [mix l r 0.5] Geom.Top [heading Downward]
					curl [mix l r 0.5] Geom.Bot [heading Downward]
				dispiro
					widths.center lineWidth
					flat [mix l r 0.75] Geom.Top [heading Downward]
					curl [mix l r 0.75] Geom.Bot [heading Downward]

		define [VBarShadeShape] : begin
			define lineWidth : Math.min GeometryStroke [AdviceStroke 5 MosaicWidthScalar]
			define r : MosaicWidth / 2 + Geom.Size - GeometryStroke + lineWidth / 2
			define l : MosaicWidth / 2 - (r - MosaicWidth / 2)
			return : union
				dispiro
					widths.center lineWidth
					flat [mix l r 0.5] Geom.Top [heading Downward]
					curl [mix l r 0.5] Geom.Bot [heading Downward]

		create-glyph [MangleName 'vShadeSquare'] [MangleUnicode 0x25A5] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'whiteSquare'
				intersection
					refer-glyph : MangleName 'blackSquare'
					VShadeShape

		create-glyph [MangleName 'vBarSquare'] [MangleUnicode 0x25EB] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'whiteSquare'
				intersection
					refer-glyph : MangleName 'blackSquare'
					VBarShadeShape

		create-glyph [MangleName 'hvShadeSquare'] [MangleUnicode 0x25A6] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'hShadeSquare'
				refer-glyph : MangleName 'vShadeSquare'

		define [DDiagShadeShape] : begin
			define lineWidth : Math.min GeometryStroke ((Geom.Size * 2 - GeometryStroke * 2) * 1 / 11)
			define top : SymbolMid + Geom.Size
			define bot : SymbolMid - (top - SymbolMid)
			return : glyph-proc
				foreach [j : range (-10) till 10] : include : dispiro
					widths.center lineWidth
					flat Geom.Left [mix top bot (j / 4)] [heading Rightward]
					curl Geom.Right [mix top bot (j / 4 + 1)] [heading Rightward]

		define [UDiagShadeShape] : begin
			define lineWidth : Math.min GeometryStroke ((Geom.Size * 2 - GeometryStroke * 2) * 1 / 11)
			define top : SymbolMid + Geom.Size
			define bot : SymbolMid - (top - SymbolMid)
			return : glyph-proc
				foreach [j : range (-10) till 10] : include : dispiro
					widths.center lineWidth
					flat Geom.Left [mix top bot (j / 4)] [heading Rightward]
					curl Geom.Right [mix top bot (j / 4 - 1)] [heading Rightward]

		create-glyph [MangleName 'dDiagShadeSquare'] [MangleUnicode 0x25A7] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'whiteSquare'
				intersection
					refer-glyph : MangleName 'blackSquare'
					DDiagShadeShape

		create-glyph [MangleName 'uDiagShadeSquare'] [MangleUnicode 0x25A8] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'whiteSquare'
				intersection
					refer-glyph : MangleName 'blackSquare'
					UDiagShadeShape

		create-glyph [MangleName 'udDiagShadeSquare'] [MangleUnicode 0x25A9] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'dDiagShadeSquare'
				refer-glyph : MangleName 'uDiagShadeSquare'

		create-glyph [MangleName 'vShadeCircle'] [MangleUnicode 0x25CD] : glyph-proc
			set-width MosaicWidth
			include : union
				refer-glyph : MangleName 'whiteCircle'
				intersection [refer-glyph : MangleName 'blackCircleO'] [VShadeShape]

	do "Partial circles"
		define partialCircleQuarters : list
			list 0x25D0 1 1 0 0
			list 0x25D1 0 0 1 1
			list 0x25D2 0 1 0 1
			list 0x25D3 1 0 1 0
			list 0x25D4 0 0 1 0
			list 0x25D5 0 1 1 1
		foreach [{u LT LB RT RB} : items-of partialCircleQuarters] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				set-width MosaicWidth
				include : union
					refer-glyph : MangleName 'whiteCircle'
					intersection
						refer-glyph : MangleName 'blackCircleO'
						new-glyph : glyph-proc
							if LT : include : UpperLeftQuarterMark
							if LB : include : LowerLeftQuarterMark
							if RT : include : UpperRightQuarterMark
							if RB : include : LowerRightQuarterMark

		define arcQuarters : list
			list 0x25DC 1 0 0 0
			list 0x25DD 0 0 1 0
			list 0x25DE 0 0 0 1
			list 0x25DF 0 1 0 0
			list 0x25E0 1 0 1 0
			list 0x25E1 0 1 0 1
		foreach [{u LT LB RT RB} : items-of arcQuarters] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				set-width MosaicWidth
				include : intersection
					refer-glyph : MangleName 'whiteCircle'
					new-glyph : glyph-proc
						if LT : include : UpperLeftQuarterMark
						if LB : include : LowerLeftQuarterMark
						if RT : include : UpperRightQuarterMark
						if RB : include : LowerRightQuarterMark

	do "Partial square"
		define squareParts : list
			list 0x25E7 1 1 0 0 0 0 0 0
			list 0x25E8 0 0 1 1 0 0 0 0
			list 0x25E9 0 0 0 0 1 0 0 0
			list 0x2B14 0 0 0 0 0 0 1 0
			list 0x2B15 0 0 0 0 0 1 0 0
			list 0x25EA 0 0 0 0 0 0 0 1
		foreach [{u LT LB RT RB LTh LBh RTh RBh} : items-of squareParts] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				set-width MosaicWidth
				include : union
					refer-glyph : MangleName 'whiteSquare'
					intersection
						refer-glyph : MangleName 'blackSquare'
						new-glyph : glyph-proc
							if LT : include : UpperLeftQuarterMark
							if LB : include : LowerLeftQuarterMark
							if RT : include : UpperRightQuarterMark
							if RB : include : LowerRightQuarterMark
							if LTh : include : UpperLeftHalfMark
							if LBh : include : LowerLeftHalfMark
							if RTh : include : UpperRightHalfMark
							if RBh : include : LowerRightHalfMark

	do "Partial diamond"
		define diamondParts : list
			list 0x2B16 1 1 0 0
			list 0x2B17 0 0 1 1
			list 0x2B18 1 0 1 0
			list 0x2B19 0 1 0 1
		foreach [{u LT LB RT RB LTh LBh RTh RBh} : items-of diamondParts] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				set-width MosaicWidth
				include : union
					refer-glyph : MangleName 'whiteDiamond'
					intersection
						refer-glyph : MangleName 'blackDiamond'
						new-glyph : glyph-proc
							if LT : include : UpperLeftQuarterMark
							if LB : include : LowerLeftQuarterMark
							if RT : include : UpperRightQuarterMark
							if RB : include : LowerRightQuarterMark

	do "Partial triangle"
		define triangleParts : list
			list 0x25ED 1 0 1 0
			list 0x25EE 1 0 0 1
			list 0x29E8 0 1 1 0
			list 0x29E9 0 1 0 1
		foreach [{u UP DN LH RH} : items-of triangleParts] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				set-width MosaicWidth
				include : union
					glyph-proc
						if UP : include : refer-glyph : MangleName 'whiteTriangleUp'
						if DN : include : refer-glyph : MangleName 'whiteTriangleDown'
					intersection
						glyph-proc
							if UP : include : refer-glyph : MangleName 'blackTriangleUp'
							if DN : include : refer-glyph : MangleName 'blackTriangleDown'
						glyph-proc
							if LH : include : LeftHalfMask
							if RH : include : RightHalfMask

	do "Partial Stars"
		define starParts : list
			list 0x2BE8 1 0 0
			list 0x2BE9 0 1 0
			list 0x2BEA 1 0 1
			list 0x2BEB 0 1 1

		foreach { u lh rh bord } [items-of starParts] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				set-width MosaicWidth
				if bord : include [refer-glyph : MangleName 'whiteStar']
				if lh : include : intersection [LeftHalfMask]  [refer-glyph : MangleName 'blackStar']
				if rh : include : intersection [RightHalfMask] [refer-glyph : MangleName 'blackStar']

	do "Quarter-line square and circle"
		define quarterLineParts : list
			list 0x25F0 'whiteSquare' 1 1 0 0
			list 0x25F1 'whiteSquare' 0 1 1 0
			list 0x25F2 'whiteSquare' 0 0 1 1
			list 0x25F3 'whiteSquare' 1 0 0 1
			list 0x25F4 'whiteCircle' 1 1 0 0
			list 0x25F5 'whiteCircle' 0 1 1 0
			list 0x25F6 'whiteCircle' 0 0 1 1
			list 0x25F7 'whiteCircle' 1 0 0 1
		foreach { u frame T L B R } [items-of quarterLineParts] : begin
			create-glyph [MangleName ('uni' + u)] [MangleUnicode u] : glyph-proc
				local hh : GeometryStroke / 2 * HVContrast
				local hv : GeometryStroke / 2
				local s    GeometryStroke
				set-width MosaicWidth
				include : union
					refer-glyph [MangleName frame]
					if L [HBar (MosaicMiddle - Geom.Size + hh) (MosaicMiddle + hh) SymbolMid s] [glyph-proc]
					if R [HBar (MosaicMiddle + Geom.Size - hh) (MosaicMiddle - hh) SymbolMid s] [glyph-proc]
					if T [VBar MosaicMiddle (SymbolMid + Geom.Size - hv) (SymbolMid - hv) s]    [glyph-proc]
					if B [VBar MosaicMiddle (SymbolMid - Geom.Size + hv) (SymbolMid + hv) s]    [glyph-proc]

	do "Sun and Gear"
		define [EightPointingRaysShape r] : glyph-proc
			foreach [n : range 0 8] : begin
				local theta : n / 8 * Math.PI * 2
				local c : Math.cos theta
				local s : Math.sin theta
				include : dispiro
					widths.center rayWidth
					corner (MosaicMiddle + c * r) (SymbolMid + s * r)
					corner (MosaicMiddle + c * Geom.Size) (SymbolMid + s * Geom.Size)

		define rayWidth : AdviceStroke 8 MosaicWidthScalar
		define rayInnerRadius : Geom.Size * 0.56
		define dotRadius : Geom.Size * 0.44

		create-glyph [MangleName 'blackSunWithRays'] [MangleUnicode 0x2600] : glyph-proc
			set-width MosaicWidth
			include : EightPointingRaysShape rayInnerRadius
			include : RingAt MosaicMiddle SymbolMid dotRadius
		create-glyph [MangleName 'whiteSunWithRays'] [MangleUnicode 0x263C] : glyph-proc
			set-width MosaicWidth
			include : EightPointingRaysShape rayInnerRadius
			include : RingStrokeAt MosaicMiddle SymbolMid dotRadius rayWidth
		create-glyph [MangleName 'gear'] [MangleUnicode 0x2699] : glyph-proc
			set-width MosaicWidth
			local gearRingRad : mix rayInnerRadius Geom.Size 0.4
			include : EightPointingRaysShape (gearRingRad - rayWidth / 2)
			include : RingStrokeAt MosaicMiddle SymbolMid gearRingRad rayWidth
			include : RingAt MosaicMiddle SymbolMid (0.4 * (gearRingRad - rayWidth))


	do "Miscellaneous"
		create-glyph [MangleName 'dottedWhiteTriangle'] [MangleUnicode 0x25EC] : glyph-proc
			set-width MosaicWidth
			include : refer-glyph : MangleName 'whiteTriangleUp'
			include : CircleDotAt MosaicMiddle (SymbolMid - Geom.Size / 3) [Math.min (MosaicWidth / 8	) PeriodRadius]

		create-glyph [MangleName 'uni25D8'] [MangleUnicode 0x25D8] : glyph-proc
			set-width MosaicWidth
			include : difference
				refer-glyph : MangleName 'blackLongRectangle'
				refer-glyph : MangleName 'blackCircle'

		create-glyph [MangleName 'uni25D9'] [MangleUnicode 0x25D9] : glyph-proc
			set-width MosaicWidth
			include : difference
				refer-glyph : MangleName 'blackLongRectangle'
				refer-glyph : MangleName 'whiteCircle'

		create-glyph [MangleName 'uni25DA'] [MangleUnicode 0x25DA] : glyph-proc
			set-width MosaicWidth
			include : intersection
				refer-glyph : MangleName 'uni25D9'
				UpperHalfMask

		create-glyph [MangleName 'uni25DB'] [MangleUnicode 0x25DB] : glyph-proc
			set-width MosaicWidth
			include : intersection
				refer-glyph : MangleName 'uni25D9'
				LowerHalfMask